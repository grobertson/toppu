#!/usr/bin/python

import sys, string, os
from time import strptime
import re, shlex, subprocess, datetime
import curses

import optparse
parser = optparse.OptionParser()

# handle app declaration
parser.add_option('-a', action="store", dest="app")
parser.add_option('--app', action="store", dest="app")

# handle app declaration
parser.add_option('-t', action="store", dest="timeout", type="int")
parser.add_option('--timeout', action="store", dest="timeout", type="int")
parser.set_defaults(timeout=2000)

options, args = parser.parse_args()

try:
    assert options.app is not None
    APP_NAME = options.app
    assert options.timeout is not None
    TIMEOUT = options.timeout
except:
    print "toppu - Top-like command line performance monitoring for Heroku"
    print "https://github.com/grobertson/toppu"
    print
    print "Usage: toppu -a <appname> [-t <timeout in ms>]"
    exit()


stdscr = curses.initscr()
curses.start_color()
curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
curses.init_pair(3, curses.COLOR_WHITE, curses.COLOR_BLACK)
curses.init_pair(4, curses.COLOR_BLUE, curses.COLOR_BLACK)
def parse_line(line):
    line = clean_logline(line)
    line_halves = re.split('\]\: ', line)
    line_meta = re.split(' ', line_halves[0])

    parsed_data = dict()
    parsed_data['timestamp'] = line_meta[0]
    if line_meta.__len__() > 1:
        try:
            parsed_type = re.search('^([a-zA-Z]+)\[([a-zA-Z]+)', line_meta[1])
            parsed_data['log_source'] = parsed_type.group(1)
            parsed_data['log_type'] = parsed_type.group(2)
            parsed_time = re.match('([\d][\d][\d][\d])\-([\d][\d])\-([\d][\d])T([\d][\d])\:([\d][\d])\:([\d][\d])', parsed_data['timestamp'])
            year_int = int(parsed_time.group(1))
            month_int = int(parsed_time.group(2))
            day_int = int(parsed_time.group(3))
            hour_int = int(parsed_time.group(4))
            minute_int = int(parsed_time.group(5))
            second_int = int(parsed_time.group(6))
            parsed_data['log_time'] = datetime.datetime(year_int, month_int, day_int, hour_int, minute_int, second_int)
        except: 
            print line
            return False
    else:
        return False
    
    if parsed_data['log_source'] == "heroku":
        if line_halves.__len__() > 1:
            line_halves[1] = re.sub(', ', ',', line_halves[1])
            line_chunks = re.split(' ', line_halves[1])
            for chunk in line_chunks:
                line_chunks = re.split('=', chunk)
                if line_chunks.__len__() > 2:
                    #fwd and path are a little clunky to parse
                    pass
                elif line_chunks.__len__() > 1:
                    parsed_data[line_chunks[0]] = line_chunks[1]
                    pass
                else:
                    pass
        else:
            return False
    else:
        # app (i.e. app[instance] or (async job output) app.*.*[guid] lines would need specific parsing and you'd do that somewhere around here. 
        return False
                        
    return parsed_data


def run_heroku(app_name):
    command = '/usr/bin/heroku logs -t --app ' + app_name
    args = shlex.split(command)
    heroku = subprocess.Popen(args,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.STDOUT)
    return iter(heroku.stdout.readline, b'')


def clean_logline(line):
    line = re.sub('\n', '', line)
    return line



#main loop
for line in run_heroku(APP_NAME):
     new_data =  parse_line(line)
     if not new_data:
         pass
     else:
         if new_data['log_type'] == 'web':
             #print new_data
             pass
         elif new_data['log_type'] == 'worker':
             pass
         elif new_data['log_type'] == 'router':
             line_number = int(re.search('\.([\d]+)', new_data['dyno']).group(1))
             stdscr.addstr(0,1,"Dyno\t\tService\t\tConnect\t\tStatus", curses.A_REVERSE)
             if new_data['status'] == "503":
                 stdscr.addstr(line_number,1, new_data['dyno'] + "\t\t" + new_data['connect'] + "\t\t" + new_data['service'] + "\t\t" + new_data['status'], curses.color_pair(1))
             else:
                 service = re.search('([\d]+)ms', new_data['service'])
                 service_time = int(service.group(1))
                 if service_time < TIMEOUT:
                     stdscr.addstr(line_number,1, new_data['dyno'] + "\t\t" + new_data['connect'] + "\t\t" + new_data['service'] + "\t\t" + new_data['status'], curses.color_pair(3))
                 else:
                     stdscr.addstr(line_number,1, new_data['dyno'] + "\t\t" + new_data['connect'] + "\t\t" + new_data['service'] + "\t\t" + new_data['status'], curses.color_pair(2))
                     
             stdscr.refresh()
         pass
    
